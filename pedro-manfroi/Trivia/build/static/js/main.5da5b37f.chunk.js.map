{"version":3,"sources":["assets/PageNotFound.png","components/home/Home.tsx","components/quiz/Question.tsx","utils/APIUtils.tsx","utils/StringUtils.ts","components/quiz/QuizHelpers.ts","components/quiz/AnswerResult.tsx","components/quiz/Results.tsx","components/quiz/Quiz.tsx","components/settings/Settings.tsx","components/home/NotFoundPage.tsx","TriviaApp.tsx","TriviaAppErrorBoundary.tsx","index.tsx"],"names":["module","exports","Home","classes","useStyles","Container","component","maxWidth","className","paper","Typography","variant","align","Box","p","to","Button","fullWidth","color","makeStyles","theme","marginTop","spacing","display","flexDirection","alignItems","paddingBottom","root","margin","APIUtils","URL","normalizeHtmlText","text","textAreaElement","document","createElement","innerHTML","value","mapResultsPayloadToQuestions","results","questions","forEach","r","push","category","description","question","correctAnswer","correct_answer","AnswerResult","answer","correct","userAnswer","Results","answers","finalScore","length","totalQuestions","map","Quiz","useState","setLoading","setQuestions","useEffect","a","axios","get","response","data","response_code","Error","toString","fetchData","hasQuestions","hasFinished","computeScore","Settings","NotFound","style","marginLeft","marginRight","width","src","PageNotFound","alt","TriviaApp","exact","path","NotFoundPage","SwitchWithTransitionEffect","children","location","useLocation","TransitionGroup","CSSTransition","key","timeout","classNames","TriviaAppErrorBoundary","state","hasError","error","errorInfo","console","log","this","props","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,0C,iMCa9BC,EAAW,WACpB,IAAMC,EAAUC,IAChB,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKC,UAAWL,EAAQM,OACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,oCACA,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,2DAEJ,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,UAAlC,wBAEJ,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAAC,IAAD,CAAMC,GAAG,SACL,kBAACC,EAAA,EAAD,CAAQC,WAAS,EAACN,QAAQ,YAAYO,MAAM,WAA5C,cASlBd,EAAYe,aAAW,SAACC,GAAD,MAAY,CACrCX,MAAO,CACLY,UAAWD,EAAME,QAAQ,IACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,cAAe,Q,kDCFHP,aAAW,SAACC,GAAD,MAAY,CACrCO,KAAM,CACJ,QAAS,CACPC,OAAQR,EAAME,QAAQ,S,OCxCTO,E,kCAAAA,EAEMC,IAAM,qE,qBCE1B,SAASC,EAAkBC,GAE9B,IAAIC,EAAkBC,SAASC,cAAc,YAG7C,OAFAF,EAAgBG,UAAYJ,EAErBC,EAAgBI,MCDpB,IA6BMC,EAA+B,SAACC,GACzC,IAAMC,EAA4B,GASlC,OARAD,EAAQE,SAAQ,SAAAC,GACZF,EAAUG,KAAK,CACXC,SAAUb,EAAkBW,EAAEE,UAC9BC,YAAad,EAAkBW,EAAEI,UACjCC,cAAoC,SAArBL,EAAEM,oBAIlBR,G,QCxCES,EAA0B,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAChCC,EAAUD,EAAOE,aAAeF,EAAOH,cAE7C,OACI,oCACI,kBAAClC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,aAA0DsC,EAAON,WAErE,kBAAC/B,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,gBAA6DsC,EAAOL,cAExE,kBAAChC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,WAAwDuC,EAAU,UAAY,eAEhFA,GACF,kBAACtC,EAAA,EAAD,CAAKC,EAAG,GACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,YAAYC,MAAM,UAAtC,0BAAuEsC,EAAOH,cAAgB,OAAS,YCP1GM,EAAqB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,WACpCpD,GADqE,wCAC3DC,KAEhB,IAAKkD,IAAYA,EAAQE,OAAQ,OAAO,kBAAC,IAAD,CAAUzC,GAAG,MAErD,IAAM0C,EAAiBH,EAAQE,OAM/B,OACI,kBAACnD,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACjC,yBAAKC,UAAWL,EAAQM,OACpB,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,cACA,kBAACF,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAAU2C,EAAzC,OAAyDE,GAR1DH,EAAQI,KAAI,SAAAR,GACf,OAAO,kBAAC,EAAD,CAAcA,OAAQA,OASzB,kBAAC,IAAD,CAAMnC,GAAG,KACL,kBAACC,EAAA,EAAD,CAAQC,WAAS,EAACN,QAAQ,YAAYO,MAAM,WAA5C,mBAOdd,EAAYe,aAAW,SAACC,GAAD,MAAY,CACrCX,MAAO,CACLY,UAAWD,EAAME,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,cC5BLkC,G,cAAW,WAAO,IAAD,EACIC,oBAAkB,GADtB,mBACVC,GADU,aAEQD,mBAAyB,IAFjC,mBAEnBpB,EAFmB,KAERsB,EAFQ,OAGIF,mBAAmB,IAHvB,mBAGnBN,EAHmB,aAIoBM,mBAAiB,IAJrC,6BAKVxD,IAGhB2D,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAEQH,GAAW,GAFnB,SAG+BI,IAAMC,IAAyBrC,EAASC,KAHvE,aAGcqC,EAHd,SAMwBA,EAASC,MAAwC,IAAhCD,EAASC,KAAKC,eAAuBF,EAASC,KAAK7B,SAAW4B,EAASC,KAAK7B,QAAQiB,QAN7H,gBAOYM,EAAaxB,EAA6B6B,EAASC,KAAK7B,UAPpE,6BASkB,IAAI+B,MAAJ,2CAA8CH,IAThE,gEAac,IAAIG,MAAJ,yBAA4B,KAAMC,aAbhD,yBAeQV,GAAW,GAfnB,8EADY,uBAAC,WAAD,wBAmBZW,KACD,IAQF,IAYKC,KAAkBjC,IAAaA,EAAUgB,QAC/C,GAAIiB,GH3DmB,SAACjC,EAA2Bc,GAEnD,SAAKd,GAAcA,EAAUgB,QAAWF,GAAYA,EAAQE,SAErDF,EAAQE,SAAWhB,EAAUgB,OGuDhBkB,CAAYlC,EAAWc,GAAU,CAEjD,IAAMC,EHhDc,SAACD,GACzB,IAAIC,EAAa,EAKjB,OAJAD,EAAQb,SAAQ,SAAAuB,GACRA,EAAEZ,aAAeY,EAAEjB,eAAeQ,OAGnCA,EG0CgBoB,CAAarB,GAChC,OAAO,kBAAC,EAAD,CAASA,QAASA,EAASC,WAAYA,IAGlD,MAAM,IAAIe,MAAJ,eA6BJlE,EAAYe,aAAW,SAACC,GAAD,MAAY,CACrCX,MAAO,CACLY,UAAWD,EAAME,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,cCzGLmD,EAAe,WACxB,OAAO,yC,iBCCI,SAASC,IACpB,OACI,yBAAKC,MAAO,CAACvD,QAAS,QAASwD,WAAY,OAAQC,YAAa,OAAQC,MAAO,QAC3E,yBAAKC,IAAKC,IAAcC,IAAI,cAC5B,kBAAC,IAAD,CAAMrE,GAAG,KACL,oD,4BCCD,SAASsE,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIjF,UAAWJ,IACjC,kBAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,QAAQjF,UAAWqD,IACrC,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,YAAYjF,UAAWsE,IACzC,kBAAC,IAAD,CAAOtE,UAAWkF,MAc1B,IAAMC,EAA8C,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC9CC,EAAWC,cACjB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAeC,IAAKJ,EAASI,IAAKC,QAAS,KAAMC,WAAW,SAC1D,kBAAC,IAAD,CAAQN,SAAUA,GACdD,M,wBClCSQ,E,4MAEjBC,MAAQ,CAAEC,UAAU,G,gEAMFC,EAAcC,GAC5BC,QAAQC,IAAR,4CAAiDF,GAAaD,K,+BAI9D,OAAII,KAAKN,MAAMC,SACN,qDAGFK,KAAKC,MAAMhB,Y,gDAbUW,GAC5B,MAAO,CAAED,UAAU,O,GALyBO,aCDpDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAACzB,EAAD,QAGJnD,SAAS6E,eAAe,W","file":"static/js/main.5da5b37f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PageNotFound.4772b5ab.png\";","/**\n * This is a function component that represents the Home page of the app.\n * It utilizes the makeStyles utility to inject custom CSS directly in JavaScript (CSS-in-JS).\n */\n\nimport React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nexport const Home: FC = () => {\n    const classes = useStyles();\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography variant=\"h5\" align=\"center\">Welcome to the Trivia Challenge!</Typography>\n                <Box p={6}>\n                    <Typography variant=\"subtitle1\" align=\"center\">You will be presented with 10 True or False questions.</Typography>\n                </Box>\n                <Box p={4}>\n                    <Typography variant=\"body1\" align=\"center\">Can you score 100%?</Typography>\n                </Box>\n                <Box p={2}>\n                    <Link to=\"/quiz\">\n                        <Button fullWidth variant=\"contained\" color=\"primary\">BEGIN</Button>\n                    </Link>\n                </Box>                    \n            </div>                \n        </Container>\n    )\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(10),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      paddingBottom: 10,\n    },\n}));","import React, { FC, MouseEvent } from 'react';\nimport { QuestionData } from './types';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface Props {\n    question: Pick<QuestionData, 'category' | 'description'>\n    onAnswerSelected(answer: boolean): void    \n}\n\n\n/** \n * Receives a single Question and renders it.\n * After the user select an answer, will call a callback function with the answer selected by the user.\n */\nexport const Question: FC<Props> = ({ question, onAnswerSelected}: Props) => {\n    const classes = useStyles();\n    const { category, description } = question;        \n    const handleButtonClick = (anwser: boolean) => (_e: MouseEvent<HTMLButtonElement>) => {\n        onAnswerSelected(anwser)\n    }\n\n    return (\n        <>\n            <Typography variant=\"h5\" align=\"center\">{category}</Typography>\n            <Box p={4}>\n                <Typography variant=\"h4\" align=\"center\">{description}</Typography>\n            </Box>                \n            <Box p={4}>\n                <div className={classes.root}>\n                    <Button variant=\"contained\" color=\"secondary\" onClick={handleButtonClick(false)}>False</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleButtonClick(true)}>True</Button>\n                </div>                    \n            </Box>\n        </>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n}));\n\n\n","/**\n * Utility file to expose the API URL and its types.\n */\nexport default class APIUtils {\n    // Default URL endpoint\n    public static readonly URL = 'https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean';\n}\n// Representation of the Open Trivia Database Response\nexport interface OpenTriviaDBReponse {\n    response_code: number\n    results: OpenTriviaDBResult[]\n}\n\n// Representation of a Open Trivia Database result (e.g: a given question)\nexport interface OpenTriviaDBResult {\n    category: string\n    correct_answer: string\n    difficulty: string\n    incorrect_answers: string[]\n    question: string\n    type: string\n}","\n/**\n * Utility function to normalize a text encoded with HTML Code to a plain string.\n * Example of a string encoded with HTML Code: \"You can calculate Induced Voltage using: &epsilon; =-N * (d&Phi;B)/(d)\"\n * @param text text to be normalized.\n * @returns a normalized string.\n */\nexport function normalizeHtmlText(text: string): string {          \n    // Creates a temporary textarea element into the DOM and injects the text to its content.\n    let textAreaElement = document.createElement(\"textarea\");\n    textAreaElement.innerHTML = text;\n    // Return the value converted to a plain string\n    return textAreaElement.value;   \n}","import { Answer, QuestionData } from './types';\nimport { normalizeHtmlText } from '../../utils/StringUtils';\nimport { OpenTriviaDBResult } from '../../utils/APIUtils';\n\n/**\n * Check if the game is considered finished.\n * It will be considered finished when there are answers to all given questions.\n * @param questions current questions.\n * @param answer current answers.\n * @returns true if there are answers to all questions, otherwise false.\n */\nexport const hasFinished = (questions: QuestionData[], answers: Answer[]): boolean => {\n    // If there are no questions or answers data, it is considered as not finished\n    if (!questions || !questions.length || !answers || !answers.length) return false;    \n    // Finished when the amount of questions and answers are the same\n    return answers.length === questions.length;\n}\n\n/**\n * Compute the score based on the answers.\n * The score will be incremented when the user selected the correct answer.\n * @param answers the selected answers.\n * @returns total count of correct answers.\n */\nexport const computeScore = (answers: Answer[]): number => {\n    let finalScore = 0;\n    answers.forEach(a => {\n        if (a.userAnswer === a.correctAnswer) finalScore++;\n    });\n    \n    return finalScore;\n}\n\n/**\n * Maps the results of the Open Trivia DB to QuestionsData.\n * Coerce data to the QuestionData format.\n * Will normalize text information for the category and description.\n * @param results the data retrieved in the Open Trivia DB format.\n * @returns data converted to the QuestionData type.\n */\nexport const mapResultsPayloadToQuestions = (results: OpenTriviaDBResult[]): QuestionData[] => {\n    const questions: QuestionData[] = [];        \n    results.forEach(r => {\n        questions.push({\n            category: normalizeHtmlText(r.category),\n            description: normalizeHtmlText(r.question),\n            correctAnswer: r.correct_answer === \"True\" ? true : false,\n        })\n    })\n    \n    return questions;\n}","import React, { FC } from 'react';\nimport { Answer } from './types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\ninterface Props {\n    answer: Answer    \n}\n\n// Given a Answer type, renders the result of an answer.\nexport const AnswerResult: FC<Props> = ({ answer }: Props) => {\n    const correct = answer.userAnswer === answer.correctAnswer;\n\n    return (\n        <>\n            <Box p={6}>\n                <Typography variant=\"subtitle1\" align=\"center\">Category: {answer.category}</Typography>\n            </Box>        \n            <Box p={6}>\n                <Typography variant=\"subtitle1\" align=\"center\">Description: {answer.description}</Typography>\n            </Box>     \n            <Box p={6}>\n                <Typography variant=\"subtitle1\" align=\"center\">Status: {correct ? \"Correct\" : \"Incorrect\"}</Typography>\n            </Box>     \n            {!correct &&\n            <Box p={6}>\n                <Typography variant=\"subtitle1\" align=\"center\">The correct answer is: {answer.correctAnswer ? \"True\" : \"False\"}</Typography>\n            </Box>                                         \n            }\n        </>\n    )\n}","/**\n * Functional component that represents the Results page.\n * It will receive the given anwers and the final score.\n */\n\nimport React, { FC } from 'react';\nimport { Answer } from './types';\nimport { Link, Redirect } from 'react-router-dom';\nimport { AnswerResult } from './AnswerResult';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n    answers: Answer[]\n    finalScore: number\n}\n\nexport const Results: FC<Props> = ({ answers, finalScore, ...rest }: Props) => {        \n    const classes = useStyles();\n    // If there are no answers will redirect to the main page\n    if (!answers || !answers.length) return <Redirect to=\"/\" />;\n\n    const totalQuestions = answers.length;\n    function renderAnswers() {        \n        return answers.map(answer => {\n            return <AnswerResult answer={answer} />\n        })\n    }        \n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                <Typography variant=\"h5\" align=\"center\">You scored</Typography>\n                <Typography variant=\"h5\" align=\"center\">{finalScore} of {totalQuestions}</Typography>\n                {renderAnswers()}\n                <Link to=\"/\">\n                    <Button fullWidth variant=\"contained\" color=\"primary\">Play again?</Button>\n                </Link>\n            </div>                \n        </Container>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n}));","/**\n * Functional component that represent UI and the state of the Quiz.\n * State will be managed by useState hooks.\n */\n\nimport React, { FC, useEffect, useState } from 'react';\nimport { Question } from './Question';\nimport APIUtils, { OpenTriviaDBReponse } from '../../utils/APIUtils';\nimport axios from 'axios';\nimport { QuestionData, Answer } from './types';\nimport { computeScore, hasFinished, mapResultsPayloadToQuestions } from './QuizHelpers';\nimport { Results } from './Results';\nimport Container from '@material-ui/core/Container';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Link as RouterLink} from 'react-router-dom';\n\n\nexport const Quiz: FC = () => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [questions, setQuestions] = useState<QuestionData[]>([]);    \n    const [answers, setAnswers] = useState<Answer[]>([]);\n    const [currentQuestion, setCurrentQuestion] = useState<number>(0);\n    const classes = useStyles();\n    \n    // Fetching the data from the API when the component mounts (this is a one time only operation).\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                setLoading(true);\n                const response = await axios.get<OpenTriviaDBReponse>(APIUtils.URL);\n                // Check if it received a valid HTTP response.\n                // A response will be considered valid if it didn't failed and if the response_code is equal 0 and has a valid results array.\n                if (response && response.data && response.data.response_code === 0 && response.data.results && response.data.results.length) {                                        \n                    setQuestions(mapResultsPayloadToQuestions(response.data.results));\n                } else {\n                    throw new Error(`Bad data received from API call: ${response}`);\n                }                \n            } catch (error) {\n                // Catches HTTP errors related with the request and throw back for the Error boundary in the application\n                throw new Error(`Request error: ${error.toString()}`);\n            } finally {\n                setLoading(false);\n            }\n        }        \n        fetchData();\n    }, []);\n\n    /**\n     * Handles the answer selected by the user and add it to the answers array state.\n     * This is a callback function to be called when an answer is triggered.\n     * @param question the question in which the answer was made.\n     * @param answer the answer for the question.\n     */\n     const handleAnswerSelected = (question: QuestionData) => (answer: boolean) => {\n         // Creates a new answer\n        const newAnswer: Answer = {\n            ...question,\n            userAnswer: answer,\n        }\n        // Set state in a wrapped function, this will prevent unwanted side effects (e.g: concurrent renders/race conditions).\n        setAnswers(answers => [...answers, newAnswer]);\n        // Updates the current question\n        setCurrentQuestion(currentQuestion + 1);        \n    }\n\n    const hasQuestions = !!(questions && questions.length);             \n    if (hasQuestions && hasFinished(questions, answers)) {\n        // If the answers to all questions exists, will compute the final score and render the Results component\n        const finalScore = computeScore(answers);\n        return <Results answers={answers} finalScore={finalScore} />\n    }    \n\n    throw new Error(`New error`);\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <div className={classes.paper}>\n                {!loading && hasQuestions ? (\n                <>\n                    <Question question={questions[currentQuestion]} onAnswerSelected={handleAnswerSelected(questions[currentQuestion])}/>                \n                    <Box p={2}>\n                        <Typography variant=\"subtitle1\" align=\"center\">Question {currentQuestion + 1} of {questions.length}</Typography>\n                    </Box>\n                    <Box p={2}>\n                        <RouterLink to=\"/\">\n                            <Link component=\"button\" variant=\"body2\">Go back to home</Link>\n                        </RouterLink>\n                    </Box>\n                </>)\n                : (\n                <>  \n                    <Skeleton variant=\"text\" width={\"100%\"} height={90} />                                        \n                    <Skeleton variant=\"rect\" width={\"100%\"} height={400}/>        \n                    <Skeleton variant=\"text\" width={\"100%\"} height={30}/>            \n                </>)\n                }   \n            </div>\n        </Container>\n    )        \n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n      marginTop: theme.spacing(8),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n}));","/**\n * Functional component that displays the user settings.\n */\nimport React, { FC } from 'react';\n\nexport const Settings: FC = () => {\n    return <h3>Settings</h3>\n}","/**\n * Represents a 404 - Not Found page.\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PageNotFound from '../../assets/PageNotFound.png';\n\nexport default function NotFound() {\n    return (\n        <div style={{display: \"block\", marginLeft: \"auto\", marginRight: \"auto\", width: \"50%\"}}>\n            <img src={PageNotFound} alt=\"Not found\"/>            \n            <Link to=\"/\">\n                <p>Return to home page</p>\n            </Link>\n        </div>\n    )\n}","import React, { FC } from 'react';\nimport { BrowserRouter, Route, Switch, useLocation } from 'react-router-dom';\nimport { Home } from './components/home/Home';\nimport { Quiz } from './components/quiz/Quiz';\nimport { Settings } from './components/settings/Settings';\nimport NotFoundPage from './components/home/NotFoundPage';\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport \"./transitions.css\";\n\n/**\n * This is the root component of the application.\n * It renders the routes utilized in the app and the components associtated with it.\n */\nexport default function TriviaApp() {  \n  return (\n    <BrowserRouter>\n      <SwitchWithTransitionEffect>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/quiz\" component={Quiz} />\n        <Route exact path=\"/settings\" component={Settings} /> \n        <Route component={NotFoundPage} />        \n      </SwitchWithTransitionEffect>\n    </BrowserRouter>\n  );\n}\n\n\ninterface RoutesProps {\n  children: React.ReactNode\n}\n\n/**\n * Add custom CSS Transition effects when navigating through routes.\n */\nconst SwitchWithTransitionEffect: FC<RoutesProps> = ({children}) => {\n  const location = useLocation();\n  return (\n    <TransitionGroup>\n      <CSSTransition key={location.key} timeout={1500} classNames='slide'>\n        <Switch location={location}>\n          { children }\n        </Switch>\n      </CSSTransition>\n    </TransitionGroup>\n  )\n};\n\n\n\n\n","import React, { Component, ErrorInfo } from 'react';\n\nexport interface State {\n    hasError: boolean\n}\n\nexport default class TriviaAppErrorBoundary extends Component<{}, State> {\n\n    state = { hasError: false };\n\n    static getDerivedStateFromError(error: Error) {\n        return { hasError: true };\n    }\n\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        console.log(`An unexpected error has happened: ${errorInfo}`, error);\n    }\n\n    render() {\n        if (this.state.hasError) {\n          return <h1>Something went wrong.</h1>;\n        }\n    \n        return this.props.children; \n      }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TriviaApp from './TriviaApp';\nimport TriviaAppErrorBoundary from './TriviaAppErrorBoundary';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TriviaAppErrorBoundary>\n      <TriviaApp />\n    </TriviaAppErrorBoundary>      \n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}